#!/bin/bash
# This program fetch unread mails from destinated mailbox, then try to import
# data from attachments, and response with results.
VERSION=0.1.0
# Real directory where this script reside.
SCRIPT_DIR="$(dirname $0)"
# Base name of this script.
SCRIPT_NAME=$(basename $0)
# Root directory of wallet' DBs.
DB_DIR=~/.chia/mainnet/wallet/db
# Temporary CSV file.
CSV=/tmp/wallet-tx.csv

function print_usage {
    # Usage text.
    cat <<EOD
$SCRIPT_NAME version $VERSION.
Syntax: $SCRIPT_NAME [options]
Options:
-h              Print this usage.
-d path         Path to wallet's database file. Ignore "-f" option.
-f fingerprint  Wallet's fingerprint. 

If -d is missing, the default path $DB_DIR will be used.
If -f is missing, all wallet DB found will be used.
EOD
}

# Process command line options.
while getopts "hd:f:" opt; do
	case ${opt} in
		h )
			print_usage
			exit
			;;
		d )
			opt_db=$OPTARG
			;;
		f )
			opt_fp=$OPTARG
			;;
		\? )
			echo "Invalid option \"$OPTARG\""
			exit
			;;
		: )
			echo "Option \"$OPTARG\" requires an argument."
			exit
			;;
	esac
done

# Build a list of wallet DB files to parse.
declare -a db
if [ "$opt_db" == "" ]; then
	if [ "$opt_fp" == "" ]; then
		if ! [ -d "$DB_DIR" ]; then
			echo $DB_DIR not found.
			exit 0
		else
			for f in $(find "$DB_DIR" -type f -name '*_wallet_*.sqlite'); do
				db+="$f"
			done
		fi
	else
		db+="${DB_DIR}/blockchain_wallet_v1_mainnet_${opt_fp}.sqlite"
	fi
else
	db+="$opt_db"
fi

# Process every DB files.
for f in "${db[@]}"; do
	if [ ! -f "$f" ]; then
		echo ERROR: $f not found >&2
		continue
	fi
	# Query transactions.
	rm -f $CSV
	sqlite3 -readonly "$f" ".mode csv" \
		"SELECT datetime(created_at_time, 'unixepoch', 'localtime'), hex(amount), sent FROM transaction_record WHERE wallet_id = 1" \
		> $CSV
	# Extract wallet's fingerprint from file name if needed.
	if [ "$opt_fp" == "" ]; then
		re=".*blockchain_wallet_v1_mainnet_([0-9]+).sqlite"
		if [[ "$f" =~ $re ]]; then
			fp="${BASH_REMATCH[1]}"
		fi
	else
		fp=$opt_fp
	fi
	# Process and show transaction data.
	balance=0
	echo Wallet $fp transactions:
	while IFS= read -r line; do
		c=0
		IFS=,
		for v in $line; do
			let c=c+1
			case $c in
				1) time="$v" ;;
				2) amount=$(printf '%0.12f' $(bc -l <<< "scale=12;$((16#$v))/10^12")) ;;
				3)
					if [ ${v::1} -eq 0 ]; then
						dir="IN "
						balance=$(bc -l <<< "$balance + $amount")
					else
						dir="OUT"
						balance=$(bc -l <<< "$balance - $amount")
					fi
					;;
			esac
		done
		echo $time, $dir, $amount
	done < $CSV
	rm -f $CSV
	echo ------------------------------------------
	echo Total balance = $(printf '%0.12f' $balance)
done


